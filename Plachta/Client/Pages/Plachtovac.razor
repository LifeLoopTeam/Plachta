@page "/plachtovac"
@using System.Text.Json
@using BlazorContextMenu
@using Plachta.Shared.BO;
@using Plachta.Client.Components;
@using Blazorise;
@using Newtonsoft.Json

@inject IModalService Modal
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<h3>Plachta</h3>

<Button @onclick="SaveData">Save</Button>
<Button @onclick="LoadData">Load</Button>


<div id="plachtaUi">
    <CascadingValue Value="this">
        <div id="plachta-view">
            <div>
                <div>
                    @foreach (var den in Rozvrh.Dni)
                    {
                        <PlachtaDenView Den="den"></PlachtaDenView>
                    }
                </div>
            </div>
        </div>

        <div id="plachtaToolBar">
            <div class="accordion">
                <div class="card">
                    <div class="card-header" id="headingAktivity" data-toggle="collapse" data-target="#aktivity_sablony">
                        Aktivity
                    </div>

                    <div id="aktivity_sablony" class="collapse" data-parent=".accordion">
                        <div class="card-body">
                            <SablonyAktivityView></SablonyAktivityView>
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header" id="headingVeduci" data-toggle="collapse" data-target="#veduci_list">
                        Vedúci
                    </div>
                    <div id="veduci_list" class="collapse" aria-labelledby="headingVeduci" data-parent=".accordion">
                        <div class="card-body">
                            <Button class="btn btn-primary btn-sm" @onclick="PridajVeduceho">Pridaj vedúceho</Button><br />
                            @foreach (var veduci in Rozvrh.Veduci)
                            {
                                <Addons>
                                    <Addon AddonType="AddonType.Body">
                                        <TextEdit IsPlaintext="true" IsReadonly="true" @bind-Text="@veduci.Prezyvka"></TextEdit>
                                    </Addon>
                                    <Addon AddonType="AddonType.End">
                                        <Buttons>
                                            <Button class="btn btn-sm" @onclick="() => EditujVeduceho(veduci)"><i class="text-primary fas fa-user-edit"></i></Button>
                                            <Button class="btn btn-sm" @onclick="() => ZmazVeduceho(veduci)"><i class="text-danger fas fa-user-minus"></i></Button>
                                        </Buttons>
                                    </Addon>
                                </Addons>

                            }
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header" id="headingRozvrh" data-toggle="collapse" data-target="#rozvrh_info">
                        Rozvrh
                    </div>
                    <div id="rozvrh_info" class="collapse" aria-labelledby="headingRozvrh" data-parent=".accordion">
                        <div class="card-body small">
                            Počet dní: @Rozvrh.Dni.Count<br />
                            Začiatočný deň: @Rozvrh.ZaciatokStr<br />
                            Začiatok dňa: @Rozvrh.ZaciatokDna<br />
                            Koniec dňa: @Rozvrh.KoniecDna<br />
                            <button @onclick="NastaveniaRozvrhu" class="btn btn-primary btn-sm">Uprav nastavenia</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </CascadingValue>
</div>

<ContextMenu Id="aktivitaContextMenu">
    <Item OnClick="@DeleteActivity"><i class="fas fa-trash-alt red-icon"></i> Delete</Item>
    <Item OnClick="@EditActivity"><i class="fas fa-edit"></i> Edit</Item>
</ContextMenu>


@code {
    public PlachtaAktivitaView SelectedAktivita { get; set; }

    public Rozvrh Rozvrh { get; private set; } = new Rozvrh() {ZaciatokDna = new TimeSpan(8,0,0), KoniecDna = new TimeSpan(22,0,0)};

    void DeleteActivity(ItemClickEventArgs e)
    {
        var aktivita = e.Data as Aktivita;
        Rozvrh.OdstranAktivitu(aktivita);
    }

    void EditActivity(ItemClickEventArgs e)
    {
        var aktivita = e.Data as Aktivita;

        var parameters = new ModalParameters();
        parameters.Add(nameof(AktivitaPropertiesForm.Aktivita), aktivita);
        parameters.Add(nameof(AktivitaPropertiesForm.Rozvrh), Rozvrh);
        Modal.Show<AktivitaPropertiesForm>($"Aktivita {aktivita.Nazov}", parameters);
    }

    async Task NastaveniaRozvrhu()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(RozvrhNastaveniaView.Rozvrh), Rozvrh);
        var modal = Modal.Show<RozvrhNastaveniaView>("Nastavenia rozvrhu", parameters);
        await modal.Result;
        Console.WriteLine("Modal closed");
    }

    async Task PridajVeduceho()
    {
        var modal = Modal.Show<PridajVeducehoForm>("Pridaj vedúceho");
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            Rozvrh.Veduci.Add((Veduci) result.Data);
        }
    }

    async Task EditujVeduceho(Veduci veduci)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(PridajVeducehoForm.Veduci), veduci);
        var modal = Modal.Show<PridajVeducehoForm>("Uprav vedúceho", parameters);
        var result = await modal.Result;
    }

    async Task ZmazVeduceho(Veduci veduci)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(YesNoModal.Message), "Odstránením vedúceho odstránite aj jeho priradenie k aktivitám.");
        var modal = Modal.Show<YesNoModal>($"Skutočne chcete odstrániť vedúceho {veduci.Prezyvka}?", parameters);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            Rozvrh.Veduci.Remove(veduci);
        }
    }

    async Task SaveData()
    {
        await localStorage.SetItemAsync("plachta", JsonConvert.SerializeObject(Rozvrh));

        var parameters = new ModalParameters();
        parameters.Add(nameof(YesNoModal.Message), "Rozvrh bol ulozeny");
        var modal = Modal.Show<YesNoModal>($"Information", parameters);
        var result = await modal.Result;
    }

    async Task LoadData()
    { 
        Rozvrh = JsonConvert.DeserializeObject<Rozvrh>(await localStorage.GetItemAsync<string>("plachta"));

        var parameters = new ModalParameters();
        parameters.Add(nameof(YesNoModal.Message), "Rozvrh bol nacitany");
            var modal = Modal.Show<YesNoModal>($"Information", parameters);
        var result = await modal.Result;
    }

}
