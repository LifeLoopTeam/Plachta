@using System.ComponentModel
@using Plachta.Shared.BO;
@using Plachta.Client.Helpers
@using Plachta.Client.Pages;
@using BlazorContextMenu

@implements IDisposable

@inject IJSRuntime JSRuntime
@inject IModalService Modal

<div class="den">
    <div class="title">
        <span class="devVTyzdni">@(DniVTyzdni.GetDen((Den.Poradie + Plachtovac.Rozvrh.Zaciatok) % 7))</span> <br />
        <span class="veduciDna"><span>@Den.Veduci?.Prezyvka</span> <Button @onclick="NastavVeducehoDna" class="btn btn-small btn-primary" style="padding: 0;"><i class="fas fa-edit"></i></Button></span>
    </div>
    <div class="aktivity dropzone"
         @ondragenter="HandleDragEnter"
         @ondragover="e => DragOver(e)"
         @ondragover:preventDefault="_dropAllowed"
         @ondrop="e => HandleDrop(e)"
         @ref=AktivityDiv>
        @foreach (var aktivita in Den.Aktivity)
        {
            <ContextMenuTrigger MenuId="aktivitaContextMenu" Data="aktivita">
                <PlachtaAktivitaView Aktivita="@aktivita"></PlachtaAktivitaView>
            </ContextMenuTrigger>
        }
    </div>
</div>



@code{
    ElementReference AktivityDiv;

    [CascadingParameter] Plachtovac Plachtovac { get; set; }

    [Parameter]
    public Den Den { get; set; }

    private BoundingClientRect denBounding;
    private bool _dropAllowed = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Den.PropertyChanged += DenOnPropertyChanged; ;
    }

    async Task NastavVeducehoDna()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(NastavVeducehoDnaForm.Rozvrh), Plachtovac.Rozvrh);
        parameters.Add(nameof(NastavVeducehoDnaForm.Den), Den);
        var modal = Modal.Show<NastavVeducehoDnaForm>($"Úprava dňa", parameters);
        var result = await modal.Result;
    }

    public void Dispose()
    {
        Den.PropertyChanged -= DenOnPropertyChanged;
        Console.WriteLine("Den disposed");
    }

    private void DenOnPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        Console.WriteLine("Prekreslujem den");
        StateHasChanged();
    }

    private async Task HandleDragEnter()
    {
        denBounding = await JSRuntime.InvokeAsync<BoundingClientRect>("Plachtovac.getBoundingClientRect", AktivityDiv);
    }

    private async Task HandleDrop(DragEventArgs dragEventArgs)
    {
        if (Plachtovac.SelectedAktivita == null) return;
        var left = ((dragEventArgs.ClientX - denBounding.x - Plachtovac.SelectedAktivita.SelectionOffset) / denBounding.width);
        Plachtovac.Rozvrh.PresunAktivitu(Plachtovac.SelectedAktivita.Aktivita, Den, LeftToTimeSpan(left));
    }

    private void DragOver(DragEventArgs dragEventArgs)
    {
        dragEventArgs.DataTransfer.DropEffect = "move";
        if (Plachtovac.SelectedAktivita == null)
        {
            _dropAllowed = false;
            return;
        }


        var left = ((dragEventArgs.ClientX - denBounding.x - Plachtovac.SelectedAktivita.SelectionOffset) / denBounding.width);
        var size = Plachtovac.SelectedAktivita.Trvanie / 100;

        if (left < 0 || left + size > 1 || Den.Koliduje(LeftToTimeSpan(left), Plachtovac.SelectedAktivita.Aktivita))
        {
            _dropAllowed = false;
            return;
        }
        _dropAllowed = true;
    }

    private TimeSpan LeftToTimeSpan(double position)
    {
        var dayDuration = Plachtovac.Rozvrh.KoniecDna - Plachtovac.Rozvrh.ZaciatokDna;
        return new TimeSpan((int)(Plachtovac.Rozvrh.ZaciatokDna.Hours + ((position * dayDuration.TotalMinutes) / 60)), (int)(Plachtovac.Rozvrh.ZaciatokDna.Minutes + (position * dayDuration.TotalMinutes) % 60), 0);
    }
}
