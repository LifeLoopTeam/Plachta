@using System.ComponentModel
@using System.Globalization
@using Plachta.Client.Helpers
@using Plachta.Client.Pages;
@using Plachta.Shared.BO;

@implements IDisposable

@inject IJSRuntime JSRuntime

<div @ref="AktivitaHtmlElement" class="aktivita" draggable="true"
      @ondragstart="e => HandleDragStart(e)"
      style="left: @Pozicia.ToString("N", CultureInfo.InvariantCulture)%; width: @Trvanie.ToString("N", CultureInfo.InvariantCulture)%">
    @((MarkupString) Aktivita.Sablona.Design)
    @if (Aktivita.ZobrazCas)
    {
        <span class="aktivitaTime">@Aktivita.Time.ToString(@"hh\:mm")</span>
    }
</div>


@code {
    ElementReference AktivitaHtmlElement;

    [CascadingParameter]
    public Plachtovac Plachtovac { get; set; }

    [Parameter]
    public Aktivita Aktivita { get; set; }

    public double Pozicia => ((Aktivita.Time.TotalMinutes - Plachtovac.Rozvrh.ZaciatokDna.TotalMinutes) / (Plachtovac.Rozvrh.KoniecDna.TotalMinutes - Plachtovac.Rozvrh.ZaciatokDna.TotalMinutes)) * 100;

    public double Trvanie => (Aktivita.Trvanie.TotalMinutes / (Plachtovac.Rozvrh.KoniecDna.TotalMinutes - Plachtovac.Rozvrh.ZaciatokDna.TotalMinutes)) * 100;

    public double SelectionOffset { get; private set; }

    public async Task HandleDragStart(MouseEventArgs args)
    {
        Plachtovac.SelectedAktivita = this;
        var aktivitaBoundingBox = await JSRuntime.InvokeAsync<BoundingClientRect>("Plachtovac.getBoundingClientRect", AktivitaHtmlElement);
        SelectionOffset = args.ClientX - aktivitaBoundingBox.x;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Aktivita.PropertyChanged += AktivitaOnPropertyChanged;
    }

    private void AktivitaOnPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Aktivita.PropertyChanged -= AktivitaOnPropertyChanged;
    }

}
