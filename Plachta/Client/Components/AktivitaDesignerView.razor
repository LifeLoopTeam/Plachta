@using System.Globalization
@using Plachta.Shared.BO

@inject IJSRuntime JSRuntime

<canvas @ref="Canvas" class="aktivita-components" style="height: 200px; width: @((Aktivita?.Trvanie.TotalMinutes ?? 60) * 6)px"></canvas>

<hr />
<div class="dropdown">
    <button class="btn btn-success dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <i class="fas fa-plus"></i>
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <a class="dropdown-item" @onclick="Test">Text</a>
        <a class="dropdown-item" @onclick="Test2">Obrázok</a>
        <a class="dropdown-item" @onclick="Test3">Export</a>
    </div>
</div>

@code {

    ElementReference Canvas;

    private Dictionary<string, DotNetObjectReference<JSInteropBOWrapper<AktivitaItem>>> items = new Dictionary<string, DotNetObjectReference<JSInteropBOWrapper<AktivitaItem>>>();

    [Parameter]
    public Aktivita Aktivita { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var item in Aktivita.AktivitaItems)
            {
                items.Add(Guid.NewGuid().ToString(), DotNetObjectReference.Create(new JSInteropBOWrapper<AktivitaItem>(item)));
            }
            await JSRuntime.InvokeVoidAsync("FabricJSBindings.create", Canvas);
            //TODO create elements in canvas
        }
    }


    public async Task Test()
    {
        var textAktivita = new TextAktivitaItem
        {
            Fill = "#00FF00",
            Height = 50,
            Left = 10,
            Text = "asdf",
            Top = 10,
            Width = 100,
            FontFamily = "Comic Sans",
        };

        items.Add("a", DotNetObjectReference.Create(new JSInteropBOWrapper<AktivitaItem>(textAktivita)));
        await JSRuntime.InvokeVoidAsync("FabricJSBindings.addText", Canvas, "a", items["a"], textAktivita);

    }

    public async Task Test2()
    {
        await JSRuntime.InvokeVoidAsync("FabricJSBindings.changeProperty", Canvas, "a", new
        {
            fill = "#FF0000",
            text = "Skuska"
        });
    }

    public async Task Test3()
    {
        var svg = await JSRuntime.InvokeAsync<string>("FabricJSBindings.export", Canvas);
        Console.WriteLine(svg.Replace("\n", "").Replace("\r", ""));
        Aktivita.Design = svg;
    }

    public void Dispose()
    {
        foreach (var item in items.Values)
        {
            item.Dispose();
        }
    }
}