@using System.Globalization
@using Plachta.Shared.BO

@inject IJSRuntime JSRuntime


<div style="height: @(Height)px; width: @(Width)px" class="canvas-container">
    <canvas @ref="Canvas" class="aktivita-components" height="@(Height)" width="@(Width)"></canvas>
</div>
<hr />
<div class="dropdown">
    <button class="btn btn-success dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <i class="fas fa-plus"></i>
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <a class="dropdown-item" @onclick="Test">Text</a>
        <a class="dropdown-item" @onclick="Test2">Obrázok</a>
        <a class="dropdown-item" @onclick="Test3">Export</a>
    </div>
</div>

@code {
    ElementReference Canvas;

    [Parameter]
    public AktivitaSablona Sablona { get; set; }

    [Parameter]
    public Rozvrh Rozvrh { get; set; }

    private static int ScaleFactor = 1000;

    private Dictionary<string, DotNetObjectReference<JSInteropBOWrapper<AktivitaItem>>> items = new Dictionary<string, DotNetObjectReference<JSInteropBOWrapper<AktivitaItem>>>();

    public int Width
    {
        get
        {
            var fullWidth = (ScaleFactor * 1.414) - 50;
            return (int)((Sablona.Trvanie.TotalMinutes / (Rozvrh.KoniecDna.TotalMinutes - Rozvrh.ZaciatokDna.TotalMinutes)) * fullWidth);

        }
    }

    public int Height
    {
        get
        {
            return ScaleFactor / Rozvrh.PocetDni;

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("FabricJSBindings.create", Canvas);

            foreach (var item in Sablona.AktivitaItems)
            {
                var id = Guid.NewGuid().ToString();
                items.Add(id, DotNetObjectReference.Create(new JSInteropBOWrapper<AktivitaItem>(item)));
                await JSRuntime.InvokeVoidAsync("FabricJSBindings.addText", Canvas, id, items[id], items[id].Value.M);
            }
        }
    }


    public async Task Test()
    {
        var textAktivita = new TextAktivitaItem
        {
            Fill = "#00FF00",
            Height = 50,
            Left = 10,
            Text = "asdf",
            Top = 10,
            Width = 100,
            FontFamily = "Comic Sans",
        };

        var id = Guid.NewGuid().ToString();
        items.Add(id, DotNetObjectReference.Create(new JSInteropBOWrapper<AktivitaItem>(textAktivita)));
        await JSRuntime.InvokeVoidAsync("FabricJSBindings.addText", Canvas, id, items[id], textAktivita);

    }

    public async Task Test2()
    {
        await JSRuntime.InvokeVoidAsync("FabricJSBindings.changeProperty", Canvas, items.Keys.Last(), new
        {
            fill = "#FF0000",
            text = "Skuska"
        });
    }

    public async Task Test3()
    {
        var svg = await JSRuntime.InvokeAsync<string>("FabricJSBindings.export", Canvas);
        Console.WriteLine(svg.Replace("\n", "").Replace("\r", ""));
        Sablona.Design = svg;
    }

    public void Dispose()
    {
        foreach (var item in items.Values)
        {
            item.Dispose();
        }
    }
}