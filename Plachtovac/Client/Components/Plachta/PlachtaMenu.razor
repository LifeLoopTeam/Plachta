@using Newtonsoft.Json
@using Blazorise
@using Plachtovac.Client.Components.Forms
@using Plachtovac.Client.Helpers
@using Plachtovac.Client.Services
@using Plachtovac.Shared.BO
@using System.IO
@using System.Text

@inject PlachtaService PlachtaService
@inject IModalService Modal
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<li class="nav-item dropdown">
    <a class="nav-link dropdown-toggle" href="#" id="navbarFileDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        File
    </a>
    <div class="dropdown-menu" aria-labelledby="navbarFileDropdown">
        <button class="dropdown-item" @onclick="NewRozvrh">Nový</button>
        <button class="dropdown-item btn-fileOpen">
            Otvoriť
            <FileEdit Changed="OpenRozvrh" Filter="text/json" />
        </button>
        @if (PlachtaService.AktualnyRozvrh != null)
        {
            <button class="dropdown-item" @onclick="SaveRozvrh">Uložiť</button>
        }
        <div class="dropdown-divider"></div>
        <button class="dropdown-item" @onclick="LoadData">Quick Load</button>
        @if (PlachtaService.AktualnyRozvrh != null)
        {
            <button class="dropdown-item" @onclick="SaveData">Quick Save</button>
        }
    </div>
</li>
@if (PlachtaService.AktualnyRozvrh != null)
{
    <li class="nav-item">
        <a class="nav-link" href="editor">Editor</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="dataeditor">Editor dát</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="view">Tlačiť</a>
    </li>
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="navbarRozvrhDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Rozvrh: @PlachtaService.AktualnyRozvrh.Nazov
        </a>
        <div class="dropdown-menu" aria-labelledby="navbarRozvrhDropdown">
            <div class="dropdown-info">
                Počet dní: @PlachtaService.AktualnyRozvrh.Dni.Count<br />
                Začiatok: @PlachtaService.AktualnyRozvrh.ZaciatokRozvrhu?.ToString("d.MMMM")<br />
                Začiatočný deň: @PlachtaService.AktualnyRozvrh.ZaciatokStr<br />
                Začiatok dňa: @PlachtaService.AktualnyRozvrh.ZaciatokDna<br />
                Koniec dňa: @PlachtaService.AktualnyRozvrh.KoniecDna<br />
            </div>
            <div class="dropdown-divider"></div>
            <button class="dropdown-item" @onclick="SetupRozvrh">Nastavenia</button>
        </div>
    </li>

    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="navbarRozvrhDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Vedúci
        </a>
        <div class="dropdown-menu" aria-labelledby="navbarVeduciDropdown">
            <button class="dropdown-item" @onclick="PridajVeduceho">Pridaj</button>
            <div class="dropdown-divider"></div>
            @foreach (var veduci in PlachtaService.AktualnyRozvrh.Veduci)
            {
                <Addons class="dropdown-info">
                    <Addon AddonType="AddonType.Body">
                        <span class="form-control">@veduci.Prezyvka</span>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Buttons>
                            <Tooltip Text="Uprav vedúceho">
                                <Button class="btn btn-sm btn-clear" @onclick="() => EditujVeduceho(veduci)"><i class="text-primary fas fa-user-edit"></i></Button>
                            </Tooltip>
                            <Tooltip Text="Odstráň vedúceho">
                                <Button class="btn btn-sm btn-clear" @onclick="() => ZmazVeduceho(veduci)"><i class="text-danger fas fa-user-minus"></i></Button>
                            </Tooltip>
                        </Buttons>
                    </Addon>
                </Addons>
            }
        </div>
    </li>
}


@code {
    private async Task SetupRozvrh()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(RozvrhNastaveniaForm.Rozvrh), PlachtaService.AktualnyRozvrh);
        var modal = Modal.Show<RozvrhNastaveniaForm>("Nastavenia rozvrhu", parameters);
        await modal.Result;
        Console.WriteLine("Modal closed");
        StateHasChanged();
    }

    async Task PridajVeduceho()
    {
        var modal = Modal.Show<PridajVeducehoForm>("Pridaj vedúceho");
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            PlachtaService.AktualnyRozvrh.Veduci.Add((Veduci)result.Data);
            StateHasChanged();
        }
    }

    async Task EditujVeduceho(Veduci veduci)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(PridajVeducehoForm.Veduci), veduci);
        var modal = Modal.Show<PridajVeducehoForm>("Uprav vedúceho", parameters);
        var result = await modal.Result;
        StateHasChanged();
    }

    async Task ZmazVeduceho(Veduci veduci)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(YesNoModal.Message), "Odstránením vedúceho odstránite aj jeho priradenie k aktivitám.");
        var modal = Modal.Show<YesNoModal>($"Skutočne chcete odstrániť vedúceho {veduci.Prezyvka}?", parameters);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            PlachtaService.AktualnyRozvrh.OdstranVeduceho(veduci);
        }
    }

    public async Task SaveData()
    {
        var json = PlachtaService.ExportRozvrh();
        Console.WriteLine(json);
        await LocalStorage.SetItemAsync<string>("plachta", Converters.ToBase64(json));
        var parameters = new ModalParameters();
        parameters.Add(nameof(YesNoModal.Message), "Rozvrh bol ulozeny");
        Modal.Show<YesNoModal>($"Information", parameters);
    }

    public async Task LoadData()
    {
        if (PlachtaService.AktualnyRozvrh != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(YesNoModal.Message), "Skutočne chcete načítať rozvrh? Neuložené zmeny budú stratené");
            var modal = Modal.Show<YesNoModal>($"Information", parameters);
            if ((await modal.Result).Cancelled)
            {
                return;
            }
        }
        try
        {
            PlachtaService.LoadFromJson(Converters.FromBase64(await LocalStorage.GetItemAsync<string>("plachta")));

            var parameters = new ModalParameters();
            parameters.Add(nameof(YesNoModal.Message), "Rozvrh bol nacitany");
            Modal.Show<YesNoModal>($"Information", parameters);
        }
        catch
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(YesNoModal.Message), "Nepodrilo sa načítať rozvrh");
            Modal.Show<YesNoModal>($"Information", parameters);
        }
        StateHasChanged();
    }

    private async Task NewRozvrh()
    {
        if (PlachtaService.AktualnyRozvrh != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(YesNoModal.Message), "Skutočne chcete vytvoriť nový rozvrh? Neuložené zmeny budú stratené");
            var modal = Modal.Show<YesNoModal>($"Information", parameters);
            if ((await modal.Result).Cancelled)
            {
                return;
            }
        }
        PlachtaService.CreateNew();
    }

    private async Task OpenRozvrh(FileChangedEventArgs e)
    {
        try
        {
            var file = e.Files.FirstOrDefault();
            if (file != null)
            {
                if (PlachtaService.AktualnyRozvrh != null)
                {
                    var parameters = new ModalParameters();
                    parameters.Add(nameof(YesNoModal.Message), "Skutočne chcete otvoriť rozvrh? Neuložené zmeny budú stratené");
                    var modal = Modal.Show<YesNoModal>($"Information", parameters);
                    if ((await modal.Result).Cancelled)
                    {
                        return;
                    }
                }

                using (var ms = new MemoryStream())
                {
                    await file.WriteToStreamAsync(ms);
                    var json = Encoding.UTF8.GetString(ms.ToArray());
                    PlachtaService.LoadFromJson(json);
                }
                {
                    var parameters = new ModalParameters();
                    parameters.Add(nameof(YesNoModal.Message), "Rozvrh bol nacitany");
                    Modal.Show<YesNoModal>($"Information", parameters);
                }

            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }

    }

    private async Task SaveRozvrh()
    {
        var json = PlachtaService.ExportRozvrh();
        await FileUtil.SaveAs(JSRuntime, $"{PlachtaService.AktualnyRozvrh.Nazov}.json", json);
    }

}
