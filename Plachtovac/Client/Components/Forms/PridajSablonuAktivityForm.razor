@using System.ComponentModel.DataAnnotations
@using Blazorise
@using Plachtovac.Client.Helpers
@using Plachtovac.Shared.BO

<Validations Mode="ValidationMode.Auto" @ref="validations">
    <Field>
        <FieldLabel>Názov</FieldLabel>
        <Validation Validator="@ValidationRule.IsNotEmpty">
            <TextEdit @ref="NazovSablony" @bind-Text="@nazov" Placeholder="Názov aktivity">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </TextEdit>
        </Validation>
    </Field>

    <Field>
        <FieldLabel>Trvanie <span class="small">(v minutach)</span></FieldLabel>
        <Validation Validator="ValidateDuration">
            <NumericEdit TValue="int" @bind-Value="@trvanieAktivity">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </NumericEdit>
        </Validation>
    </Field>

    <Field>
        <Check TValue="bool" @bind-Checked="@zobrazeniePopisuVeduceho">Zobraziť popis pri vedúcich</Check>
    </Field>
</Validations>
<Field>
    <FieldLabel>Typ aktivity</FieldLabel>
    <Select @bind-SelectedValue="@typ">
        <SelectItem Value="String.Empty">-</SelectItem>
        @foreach (var s in typyAktivit)
        {
            <SelectItem Value="s">@s</SelectItem>
        }
    </Select>

</Field>

<VeduciAssignForm @ref="assignForm" Rozvrh="@Rozvrh" PriradenyVeduci="@Sablona.Veduci"></VeduciAssignForm>

<button @onclick="SubmitForm" class="btn btn-primary">Submit</button>
<button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
@code {
    Validations validations;

    VeduciAssignForm assignForm;

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public Rozvrh Rozvrh { get; set; }

    [Parameter]
    public AktivitaSablona Sablona
    {
        get => _sablona;
        set
        {
            _sablona = value;
            nazov = _sablona?.Nazov;
            typ = _sablona?.Typ;
            trvanieAktivity = (int) Sablona.Trvanie.TotalMinutes;
            zobrazeniePopisuVeduceho = Sablona.VeduciSPopisom;
        }
    }

    private string[] typyAktivit = {"Krúžok", "Seminár", "Prednáška", "Rozprávanie", "Šport"};

    private AktivitaSablona _sablona = new AktivitaSablona();

    private TextEdit NazovSablony;

    private string nazov;

    private string typ;

    private int trvanieAktivity;

    private bool zobrazeniePopisuVeduceho;


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            NazovSablony.Focus(true);
        }
    }

    async Task SubmitForm()
    {
        if (validations.ValidateAll())
        {
            Sablona.Nazov = nazov;
            Sablona.Typ = typ;
            Sablona.Trvanie = TimeSpan.FromMinutes(trvanieAktivity);
            Sablona.Veduci.Clear();
            Sablona.Veduci.AddRange(assignForm.GetResult());
            Sablona.VeduciSPopisom = zobrazeniePopisuVeduceho;

            await BlazoredModal.CloseAsync(ModalResult.Ok(Sablona));
        }
    }

    async Task Cancel()
    {
        await BlazoredModal.CancelAsync();
    }

    private void ValidateDuration(ValidatorEventArgs obj)
    {
        var val = (int) obj.Value;
        if (val < 10 || val > 720)
        {
            obj.ErrorText = "Čas aktivity musí byť medzi 10 až 720 minútami";
            obj.Status = ValidationStatus.Error;
        }
        else
        {
            obj.Status = ValidationStatus.Success;
        }
    }

}
