@using System.ComponentModel
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@using Blazorise
@using System.IO;
@using System.Text
@using Plachtovac.Client.Helpers
@using Plachtovac.Client.Services
@using Plachtovac.Shared.BO
@using Plachtovac.Shared.BO.GraphicsBlocks
@using Plachtovac.Client.Components.Plachta


@inherits Plachtovac.Client.Components.Plachta.CanvasEditor

@if (_imageConversionInProgress)
{
    <div class="loader-box">
        <i class="fa-4x fas fa-cog fa-spin"></i>
        <br />
        <p id="loadingText" class="mt-3">Konvertujem obrázok</p>
    </div>
}
<div style="@cotentStyle">
    <div class="container">
        <div class="row">
            <div class="col">
                <div style="height: @(Height)px; width: @(Width)px" class="canvas-container">
                    <canvas @ref="CanvasElement" class="aktivita-components" height="@(Height)" width="@(Width)"></canvas>
                </div>
            </div>
            <div class="col" style="width: 250px; height: @(Height)px; overflow-y: auto">
                @if (SelectedItem != null)
                {
                    <DesignerItemProperties GraphicsItem="SelectedItem" Parent="this"></DesignerItemProperties>
                }
                else
                {
                    <div>Pridajte nový prvok, alebo zvoľte prvok na editáciu</div>
                }
            </div>
        </div>
    </div>

    <hr />
    <div>
        <div class="btn-group">
            <button class="btn btn-success dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-plus"></i>
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="dropdown-item" @onclick="() => InsertText(Sablona.Nazov)">Text</a>
                <a class="dropdown-item" @onclick="InsertZoznamVeducich">Zoznam vedúcich</a>
                <a class="dropdown-item" @onclick="() => InsertExternalImage(Width - 10, Height - 10)">Obrázok z url</a>
                <a class="dropdown-item btn btn-fileOpen" style="position: relative">
                    Obrázok zo súboru
                    <div class="custom-control custom-file">
                        <input type="file" class="custom-file-input" @ref="@inputTypeFileElement" @oninput="InsertFile" accept="image/*" />
                    </div>
                </a>
            </div>
        </div>
        <button @onclick="SubmitForm" class="btn btn-primary">Submit</button>
        <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public AktivitaSablona Sablona { get; set; }

    [Parameter]
    public Rozvrh Rozvrh { get; set; }

    private ElementReference inputTypeFileElement;

    private bool _imageConversionInProgress = false;
    private string cotentStyle => _imageConversionInProgress ? "visibility:collapse" : "";

    private static int ScaleFactor = 1500;


    public int Width
    {
        get
        {
            var fullWidth = (ScaleFactor * 1.414) - 50;
            return (int)((Sablona.Trvanie.TotalMinutes / (Rozvrh.KoniecDna.TotalMinutes - Rozvrh.ZaciatokDna.TotalMinutes)) * fullWidth);

        }
    }

    public int Height => ScaleFactor / Rozvrh.PocetDni;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            foreach (var item in Sablona.AktivitaItems)
            {
                //Coppy object
                var itemClone = JsonSerializer.Deserialize(JsonConvert.SerializeObject(item), item.GetType());
                await InsertItem((GraphicsItem)itemClone);
            }
        }
    }

    public async Task InsertZoznamVeducich()
    {
        var textAktivita = new ZoznamVeducichTextGraphicsItem()
        {
            Fill = "#000000",
            Height = 15,
            Left = 10,
            PocetRiadkov = 1,
            Top = 10,
            Width = 40,
            ScaleX = 1,
            ScaleY = 1,
            FontFamily = "Comic Sans",
        };

        var veduci = Sablona.Veduci;
        if (Sablona.Veduci.Count == 0)
        {
            veduci = new List<AktivitaVeduci> { new AktivitaVeduci { Veduci = new Veduci { Prezyvka = "Veduci1" } }, new AktivitaVeduci { Veduci = new Veduci { Prezyvka = "Veduci2" } } };
        }

        textAktivita.NastavZoznamVeducich(veduci);

        await InsertItem(textAktivita);

    }

    public async Task InsertFile()
    {
        try
        {
            _imageConversionInProgress = true;
            StateHasChanged();
            await InsertFile(inputTypeFileElement, Width - 10, Height - 10);
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
            var parameters = new ModalParameters();
            parameters.Add(nameof(YesNoModal.Message), exc.Message);
            var modal = ModalService.Show<YesNoModal>($"Nepodarilo sa uploadnut obrázok", parameters);
            await modal.Result;
        }
        finally
        {
            _imageConversionInProgress = false;
            this.StateHasChanged();
        }
    }

    async Task SubmitForm()
    {
        var svg = await JSRuntime.InvokeAsync<string>("FabricJSBindings.export", CanvasElement);
        Console.WriteLine(svg.Replace("\n", "").Replace("\r", ""));
        Sablona.Design = svg;

        Sablona.AktivitaItems.Clear();
        foreach (var item in Items.Values)
        {
            Sablona.AktivitaItems.Add(item.Value.M);
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok(Sablona));
    }

    async Task Cancel()
    {
        await BlazoredModal.CancelAsync();
    }
}